{"version":3,"file":"src_app_AngularRoutingCourse_product_product_module_ts.js","mappings":"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","sources":["./node_modules/rxjs/dist/esm/internal/observable/throwError.js","./src/app/AngularRoutingCourse/product/component/product-details/product-details.component.ts","./src/app/AngularRoutingCourse/product/component/product-details/product-details.component.html","./src/app/AngularRoutingCourse/product/component/product-list/product-list.component.ts","./src/app/AngularRoutingCourse/product/component/product-list/product-list.component.html","./src/app/AngularRoutingCourse/product/component/product-update-info/product-update-info.component.ts","./src/app/AngularRoutingCourse/product/component/product-update-info/product-update-info.component.html","./src/app/AngularRoutingCourse/product/component/product-update-tags/product-update-tags.component.ts","./src/app/AngularRoutingCourse/product/component/product-update-tags/product-update-tags.component.html","./src/app/AngularRoutingCourse/product/component/product-update/product-update.component.ts","./src/app/AngularRoutingCourse/product/component/product-update/product-update.component.html","./src/app/AngularRoutingCourse/product/product-routing.module.ts","./src/app/AngularRoutingCourse/product/product.module.ts","./src/app/AngularRoutingCourse/product/service/product-resolver.service.ts","./src/app/AngularRoutingCourse/product/service/product.service.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { isFunction } from '../util/isFunction';\nexport function throwError(errorOrErrorFactory, scheduler) {\n    const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;\n    const init = (subscriber) => subscriber.error(errorFactory());\n    return new Observable(scheduler ? (subscriber) => scheduler.schedule(init, 0, subscriber) : init);\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Product, ProductResolved } from '../../model/product';\nimport { ProductService } from '../../service/product.service';\n\n@Component({\n  selector: 'app-product-details',\n  templateUrl: './product-details.component.html',\n  styleUrls: ['./product-details.component.css']\n})\nexport class ProductDetailsComponent implements OnInit {\n  ngOnInit(): void {\n    // const id = +this.route.snapshot.paramMap.get('id')!;\n    // this.getProduct(id);\n\n    // we not need git id and service for product only need resolver\n    // const resolvedData: ProductResolved = this.route.snapshot.data[\"Product\"];\n    // this.errorMessage = resolvedData.error!;\n    // this.onProductRetrieved(resolvedData.product!);\n\n    // read data as subscribe not property\n    this.route.data.subscribe(data=>{\n      const resolvedData: ProductResolved = data[\"Product\"];\n      this.errorMessage = resolvedData.error!;\n      this.onProductRetrieved(resolvedData.product!);\n    });\n  }\n  pageTitle = 'Product Detail';\n  product: Product | null = null;\n  errorMessage = '';\n  constructor(private productService: ProductService, private route: ActivatedRoute,\n    private router: Router) { }\n  getProduct(id: number): void {\n    this.productService.getProduct(id).subscribe({\n      next: product => this.onProductRetrieved(product),\n      error: err => this.errorMessage = err\n    });\n  }\n  onProductRetrieved(product: Product): void {\n    this.product = product;\n    if (this.product) {\n      this.pageTitle = `Product Detail: ${this.product.productName}`;\n    } else {\n      this.pageTitle = 'No product found';\n    }\n  }\n}","<div class=\"card\">\n    <div class=\"card-header\">\n        {{pageTitle}}\n    </div>\n    <div class=\"card-body\" *ngIf=\"product\">\n        <div class=\"row\">\n            <div class=\"col-md-8\">\n                <div class=\"row\">\n                    <div class=\"col-md-3\">Name:</div>\n                    <div class=\"col-md-6\">{{product.productName}}</div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-3\">Code:</div>\n                    <div class=\"col-md-6\">{{product.productCode}}</div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-3\">Description:</div>\n                    <div class=\"col-md-6\">{{product.description}}</div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-3\">Availability:</div>\n                    <div class=\"col-md-6\">{{product.releaseDate}}</div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-3\">Price:</div>\n                    <div class=\"col-md-6\">{{product.price|currency:\"USD\":\"symbol\"}}</div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-3\">5 Star Rating:</div>\n                    <div class=\"col-md-6\">\n                        <app-star [rating]=\"product.starRating\"></app-star>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-3\">Category:</div>\n                    <div class=\"col-md-6\">{{product.category}}</div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-3\">Tags:</div>\n                    <div class=\"col-md-6\">{{product.tags}}</div>\n                </div>\n            </div>\n            <div class=\"col-md-4\" *ngIf=\"product.imageUrl\">\n                <img class=\"center-block img-responsive\" [style.height.px]=\"150\" [style.margin.px]=\"2\"\n                    [src]=\"product.imageUrl\" [title]=\"product.productName\">\n            </div>\n        </div>\n        <div class=\"row mt-4\">\n            <div class=\"col-md-4\">\n                <button class=\"btn btn-outline-secondary me-3\" style=\"width:80px\"\n                    routerLink=\"/AngularRoutingCourse/Product/list\"\n                    queryParamsHandling=\"preserve\">\n                    <i class=\"fa fa-chevron-left\"></i> Back\n                </button>\n                <button class=\"btn btn-outline-primary\" style=\"width:80px\"\n                    routerLink=\"/AngularRoutingCourse/Product/update/{{product.id}}\">\n                    Edit\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"alert alert-danger\" *ngIf=\"errorMessage\">{{errorMessage}}\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Product } from '../../model/product';\nimport { ProductService } from '../../service/product.service';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent implements OnInit {\n  pageTitle = 'Product List';\n  imageWidth = 50;\n  imageMargin = 2;\n  showImage = false;\n  errorMessage = '';\n  _listFilter = '';\n  get listFilter(): string {\n    return this._listFilter;\n  }\n  set listFilter(value: string) {\n    this._listFilter = value;\n    this.filteredProducts = this.listFilter ? this.performFilter(this.listFilter) : this.products;\n  }\n  filteredProducts: Product[] = [];\n  products: Product[] = [];\n  constructor(private productService: ProductService,\n    private route: ActivatedRoute) { }\n  ngOnInit(): void {\n    // get data that send from in rout component \n    const data = this.route.snapshot.data['pageTitle'];\n\n    this.listFilter = this.route.snapshot.queryParamMap.get('filterBy') || '';\n    this.showImage = this.route.snapshot.queryParamMap.get('showImage') === 'true';\n    this.productService.getProducts().subscribe({\n      next: products => {\n        this.products = products;\n        this.filteredProducts = this.performFilter(this.listFilter);\n      },\n      error: err => this.errorMessage = err\n    });\n  }\n  performFilter(filterBy: string): Product[] {\n    filterBy = filterBy.toLocaleLowerCase();\n    return this.products.filter((product: Product) =>\n      product.productName.toLocaleLowerCase().indexOf(filterBy) !== -1);\n  }\n  toggleImage(): void {\n    this.showImage = !this.showImage;\n  }\n}","<div class=\"card\">\n    <div class=\"card-header\">\n        {{pageTitle}}\n    </div>\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-md-2\">Filter by:</div>\n            <div class=\"col-md-4\">\n                <input type=\"text\" [(ngModel)]=\"listFilter\" />\n            </div>\n        </div>\n        <div class=\"row\" *ngIf=\"listFilter\">\n            <div class=\"col-md-6\">\n                <h4>Filtered by: {{listFilter}}</h4>\n            </div>\n        </div>\n        <div class=\"table-responsive\">\n            <table class=\"table mb-0\" *ngIf=\"products && products.length\">\n                <thead>\n                    <tr>\n                        <th>\n                            <button class=\"btn btn-outline-primary btn-sm\" (click)=\"toggleImage()\">\n                                {{showImage ? \"Hide\" : \"Show\"}} Image\n                            </button>\n                        </th>\n                        <th>Product</th>\n                        <th>Code</th>\n                        <th>Available</th>\n                        <th>Price</th>\n                        <th>5 Star Rating</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let product of filteredProducts\">\n                        <td>\n                            <img *ngIf=\"showImage && product.imageUrl\" [src]=\"product.imageUrl\"\n                                [title]=\"product.productName\" [style.width.px]=\"imageWidth\"\n                                [style.margin.px]=\"imageMargin\">\n                        </td>\n                        <td>\n                            <a routerLink=\"/AngularRoutingCourse/Product/details/{{product.id}}\"\n                                [queryParams]=\"{filterBy: listFilter, showImage: showImage}\">\n                                {{ product.productName }}\n                            </a>\n                        </td>\n                        <td>{{ product.productCode }}</td>\n                        <td>{{ product.releaseDate }}</td>\n                        <td>{{ product.price | currency:\"USD\":\"symbol\":\"1.2-2\" }}</td>\n                        <td>\n                            <app-star [rating]=\"product.starRating\">\n                            </app-star>\n                        </td>\n                        <td>\n                            <button class=\"btn btn-outline-primary btn-sm\"\n                                routerLink=\"/AngularRoutingCourse/Product/update/{{product.id}}\">\n                                Edit\n                            </button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n<div *ngIf=\"errorMessage\" class=\"alert alert-danger\">\n    Error: {{ errorMessage }}\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-product-update-info',\n  templateUrl: './product-update-info.component.html',\n  styleUrls: ['./product-update-info.component.css']\n})\nexport class ProductUpdateInfoComponent implements OnInit {\n  @ViewChild(NgForm) productForm?: NgForm;\n  errorMessage = '';\n  product = { id: 1, productName: 'test', productCode: 'test', description: 'test' };\n  constructor(private route: ActivatedRoute) { }\n  ngOnInit(): void {\n  }\n}\n","<div class=\"card-body\" *ngIf=\"product\">\n    <form novalidate #productForm=\"ngForm\">\n        <fieldset>\n            <legend>Basic Product Information</legend>\n            <div class=\"row mt-4\">\n                <label class=\"col-md-2 col-form-label\" for=\"productNameId\">Product Name</label>\n                <div class=\"col-md-8\">\n                    <input class=\"form-control\" id=\"productNameId\" type=\"text\" placeholder=\"Name (required)\" required\n                        minlength=\"3\" [(ngModel)]=product.productName name=\"productName\" #productNameVar=\"ngModel\"\n                        [ngClass]=\"{'is-invalid': (productNameVar.touched || \n                                            productNameVar.dirty ||\n                                            product.id !== 0) && \n                                            !productNameVar.valid }\" />\n                    <span class=\"invalid-feedback\">\n                        <span *ngIf=\"productNameVar.errors?.['required']\">\n                            Product name is required.\n                        </span>\n                        <span *ngIf=\"productNameVar.errors?.['minlength']\">\n                            Product name must be at least three characters.\n                        </span>\n                    </span>\n                </div>\n            </div>\n            <div class=\"row mt-2\">\n                <label class=\"col-md-2 col-form-label\" for=\"productCodeId\">Product Code</label>\n                <div class=\"col-md-8\">\n                    <input class=\"form-control\" id=\"productCodeId\" type=\"text\" placeholder=\"Code (required)\" required\n                        [(ngModel)]=product.productCode name=\"productCode\" #productCodeVar=\"ngModel\" [ngClass]=\"{'is-invalid': (productCodeVar.touched || \n                                            productCodeVar.dirty ||\n                                            product.id !== 0) &&\n                                            !productCodeVar.valid }\" />\n                    <span class=\"invalid-feedback\">\n                        <span *ngIf=\"productCodeVar.errors?.['required']\">\n                            Product code is required.\n                        </span>\n                    </span>\n                </div>\n            </div>\n            <div class=\"row mt-2\">\n                <label class=\"col-md-2 col-form-label\" for=\"descriptionId\">Description</label>\n                <div class=\"col-md-8\">\n                    <textarea class=\"form-control\" id=\"descriptionId\" placeholder=\"Description\" rows=3\n                        [(ngModel)]=product.description name=\"description\"></textarea>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n<div class='alert alert-danger' *ngIf='errorMessage'>{{errorMessage}}\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-product-update-tags',\r\n  templateUrl: './product-update-tags.component.html',\r\n  styleUrls: ['./product-update-tags.component.css']\r\n})\r\nexport class ProductUpdateTagsComponent implements OnInit {\r\n  errorMessage = '';\r\n  newTags = '';\r\n  product = { id: 1, category: 'test', tags: ['test'] };\r\n  constructor(private route: ActivatedRoute) { }\r\n  ngOnInit(): void {\r\n  }\r\n  // Add the defined tags\r\n  addTags(): void {\r\n    if (this.product) {\r\n      if (!this.newTags) {\r\n        this.errorMessage = 'Enter the search keywords separated by commas and then press Add';\r\n      } else {\r\n        const tagArray = this.newTags.split(',');\r\n        this.product.tags = this.product.tags ? this.product.tags.concat(tagArray) : tagArray;\r\n        this.newTags = '';\r\n        this.errorMessage = '';\r\n      }\r\n    }\r\n  }\r\n  // Remove the tag from the array of tags.\r\n  removeTag(idx: number): void {\r\n    this.product?.tags?.splice(idx, 1);\r\n  }\r\n}","<div class=\"card-body\" *ngIf=\"product\">\n    <form novalidate>\n        <fieldset>\n            <legend>Product Search Tags</legend>\n            <div class=\"row mt-2\">\n                <label class=\"col-md-2 col-form-label\" for=\"categoryId\">Category</label>\n                <div class=\"col-md-8\">\n                    <input class=\"form-control\" id=\"categoryId\" type=\"text\" placeholder=\"Category (required)\" required\n                        minlength=\"3\" [(ngModel)]=\"product.category\" name=\"category\" #categoryVar=\"ngModel\" [ngClass]=\"{'is-invalid': (categoryVar.touched ||\n                                            categoryVar.dirty || \n                                            product.id !== 0) &&\n                                            !categoryVar.valid }\" />\n                    <span class=\"invalid-feedback\">\n                        <span *ngIf=\"categoryVar.errors?.['required']\">\n                            A category must be entered.\n                        </span>\n                        <span *ngIf=\"categoryVar.errors?.['minlength']\">\n                            The category must be at least 3 characters in length.\n                        </span>\n                    </span>\n                </div>\n            </div>\n            <div class=\"row mt-2\">\n                <label class=\"col-md-2 col-form-label\" for=\"tagsId\">Search Tags</label>\n                <div class=\"col-md-8\">\n                    <input class=\"form-control\" id=\"tagsId\" type=\"text\"\n                        placeholder=\"Search keywords separated by commas\" [(ngModel)]=\"newTags\" name=\"tags\" />\n                </div>\n                <div class=\"col-md-1\">\n                    <button class=\"btn btn-outline-primary\" type=\"button\"\n                        title=\"Enter the search keywords separated by commas and then press Add\" (click)=\"addTags()\">\n                        Add\n                    </button>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-8 offset-md-2\">\n                    <span *ngFor=\"let tag of product.tags; let i = index\">\n                        <button class=\"btn btn-outline-secondary\"\n                            style=\"font-size:smaller;margin-bottom:12px;margin-right:2px\"\n                            title=\"Click to remove this tag\" (click)=\"removeTag(i)\">\n                            {{tag}}\n                            <span class=\"fa fa-times-circle\"></span>\n                        </button>\n                    </span>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n<div class=\"alert alert-danger\" *ngIf=\"errorMessage\">{{errorMessage}}\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MessageService } from 'src/app/AngularRoutingCourse/messages/service/message.service';\nimport { Product, ProductResolved } from '../../model/product';\nimport { ProductService } from '../../service/product.service';\n\n@Component({\n  selector: 'app-product-update',\n  templateUrl: './product-update.component.html',\n  styleUrls: ['./product-update.component.css']\n})\nexport class ProductUpdateComponent implements OnInit {\n  pageTitle = 'Product Edit';\n  errorMessage = '';\n  product: Product | null = null;\n  constructor(private productService: ProductService,\n    private messageService: MessageService, private route: ActivatedRoute,\n    private router: Router) { }\n  ngOnInit() {\n    // const id = +this.route.snapshot.paramMap.get('id')!;\n    // this.getProduct(id);\n\n    // we not need git id and service for product only need resolver\n    // const resolvedData: ProductResolved = this.route.snapshot.data[\"Product\"];\n    // this.errorMessage = resolvedData.error!;\n    // this.onProductRetrieved(resolvedData.product!);\n\n    // read data as subscribe not property\n    this.route.data.subscribe(data => {\n      const resolvedData: ProductResolved = data[\"Product\"];\n      this.errorMessage = resolvedData.error!;\n      this.onProductRetrieved(resolvedData.product!);\n    });\n  }\n  getProduct(id: number): void {\n    this.productService.getProduct(id).subscribe({\n      next: product => this.onProductRetrieved(product),\n      error: err => this.errorMessage = err\n    });\n  }\n  onProductRetrieved(product: Product): void {\n    this.product = product;\n    if (!this.product) {\n      this.pageTitle = 'No product found';\n    } else {\n      if (this.product.id === 0) {\n        this.pageTitle = 'Add Product';\n      } else {\n        this.pageTitle = `Edit Product: ${this.product.productName}`;\n      }\n    }\n  }\n  deleteProduct(): void {\n    //if (this.product.id===0) {\n    if (!this.product || !this.product.id) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete(`${this.product?.productName} was deleted`);\n    } else {\n      if (confirm(`Really delete the product: ${this.product.productName}?`)) {\n        this.productService.deleteProduct(this.product.id).subscribe({\n          next: () => this.onSaveComplete(`${this.product?.productName} was deleted`),\n          error: err => this.errorMessage = err\n        });\n      }\n    }\n  }\n  saveProduct(): void {\n    if (this.product) {\n      if (this.product.id === 0) {\n        this.productService.createProduct(this.product).subscribe({\n          next: () => this.onSaveComplete(`The new ${this.product?.productName} was saved`),\n          error: err => this.errorMessage = err\n        });\n      } else {\n        this.productService.updateProduct(this.product).subscribe({\n          next: () => this.onSaveComplete(`The updated ${this.product?.productName} was saved`),\n          error: err => this.errorMessage = err\n        });\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n  onSaveComplete(message?: string): void {\n    if (message) {\n      this.messageService.addMessage(message);\n    }\n    // Navigate back to the product list\n    this.router.navigate(['/AngularRoutingCourse/Product/list']);\n    // this.router.navigate(['/AngularRoutingCourse/Product/list'],\n    //   { queryParams: { filterBy: \"\", showImage: \"Show\" } }// Hide\n    // );\n\n  }\n}\n\n","<div class=\"card\">\n    <div class=\"card-header\">\n        {{pageTitle}}\n    </div>\n    <div class=\"card-body\" *ngIf=\"product\">\n        <form novalidate #productForm=\"ngForm\">\n            <div class=\"row mt-2\">\n                <label class=\"col-md-2 col-form-label\" for=\"productNameId\">Product Name</label>\n                <div class=\"col-md-8\">\n                    <input class=\"form-control\" id=\"productNameId\" type=\"text\" placeholder=\"Name (required)\" required\n                        minlength=\"3\" [(ngModel)]=product.productName name=\"productName\" #productNameVar=\"ngModel\"\n                        [ngClass]=\"{'is-invalid': (productNameVar.touched || productNameVar.dirty) && !productNameVar.valid }\" />\n                    <span class=\"invalid-feedback\">\n                        <span *ngIf=\"productNameVar.errors?.['required']\">\n                            Product name is required.\n                        </span>\n                        <span *ngIf=\"productNameVar.errors?.['minlength']\">\n                            Product name must be at least three characters.\n                        </span>\n                    </span>\n                </div>\n            </div>\n            <div class=\"row mt-2\">\n                <label class=\"col-md-2 col-form-label\" for=\"productCodeId\">Product Code</label>\n                <div class=\"col-md-8\">\n                    <input class=\"form-control\" id=\"productCodeId\" type=\"text\" placeholder=\"Code (required)\" required\n                        [(ngModel)]=product.productCode name=\"productCode\" #productCodeVar=\"ngModel\"\n                        [ngClass]=\"{'is-invalid': (productCodeVar.touched || productCodeVar.dirty) && !productCodeVar.valid }\" />\n                    <span class=\"invalid-feedback\">\n                        <span *ngIf=\"productCodeVar.errors?.['required']\">\n                            Product code is required.\n                        </span>\n                    </span>\n                </div>\n            </div>\n            <div class=\"row mt-2\">\n                <label class=\"col-md-2 col-form-label\" for=\"descriptionId\">Description</label>\n                <div class=\"col-md-8\">\n                    <textarea class=\"form-control\" id=\"descriptionId\" placeholder=\"Description\" rows=3\n                        [(ngModel)]=product.description name=\"description\"></textarea>\n                </div>\n            </div>\n            <div class=\"row mt-2\">\n                <div class=\"col-md-4\">\n                    <button class=\"btn btn-primary mr-3\" style=\"width:80px\" type=\"button\"\n                        [title]=\"productForm.valid ? 'Save your entered data' : 'Disabled until the form data is valid'\"\n                        [disabled]=\"!productForm.valid\" (click)=\"saveProduct()\">\n                        Save\n                    </button>\n                    <button class=\"btn btn-outline-secondary mr-3\" style=\"width:80px\" type=\"button\"\n                        title=\"Cancel your edits\" routerLink=\"/AngularRoutingCourse/Product/list\">\n                        Cancel\n                    </button>\n                    <button class=\"btn btn-outline-warning\" style=\"width:80px\" type=\"button\" title=\"Delete this product\"\n                        (click)=\"deleteProduct()\">\n                        Delete\n                    </button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n<div class=\"alert alert-danger\" *ngIf=\"errorMessage\">{{errorMessage}}\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ProductDetailsComponent } from './component/product-details/product-details.component';\nimport { ProductListComponent } from './component/product-list/product-list.component';\nimport { ProductUpdateInfoComponent } from './component/product-update-info/product-update-info.component';\nimport { ProductUpdateTagsComponent } from './component/product-update-tags/product-update-tags.component';\nimport { ProductUpdateComponent } from './component/product-update/product-update.component';\nimport { ProductResolverService } from './service/product-resolver.service';\nconst routes: Routes = [\n  { path: '', pathMatch: 'full', redirectTo: 'list' },\n  {\n    path: \"list\",\n    component: ProductListComponent,\n    data: {\n      pageTitle: \"Product List\"\n    }\n  },\n  {\n    path: \"details/:id\",\n    component: ProductDetailsComponent,\n    resolve: { Product: ProductResolverService }\n    // if we need send multi resolver\n    //resolve: { Product: ProductResolverService, category: categoryResolverService }\n  },\n  {\n    path: \"update/:id\",\n    component: ProductUpdateComponent,\n    resolve: { Product: ProductResolverService },\n    children: [\n      { path: '', redirectTo: 'info', pathMatch: 'full' },\n      { path: 'info', component: ProductUpdateInfoComponent },\n      { path: 'tags', component: ProductUpdateTagsComponent }\n    ]\n  },\n  { path: \"create\", component: ProductUpdateComponent }\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ProductRoutingModule { }","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProductRoutingModule } from './product-routing.module';\nimport { ProductListComponent } from './component/product-list/product-list.component';\nimport { ProductDetailsComponent } from './component/product-details/product-details.component';\nimport { ProductUpdateComponent } from './component/product-update/product-update.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { ProductUpdateTagsComponent } from './component/product-update-tags/product-update-tags.component';\nimport { ProductUpdateInfoComponent } from './component/product-update-info/product-update-info.component';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    ProductListComponent,\n    ProductDetailsComponent,\n    ProductUpdateComponent,\n    ProductUpdateTagsComponent,\n    ProductUpdateInfoComponent\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    FormsModule,\n    /***  \n    */\n    RouterModule.forChild([\n      { path: \"list\", component: ProductListComponent }\n    ]),\n    ProductRoutingModule\n  ],\n  exports: [\n    ProductListComponent,\n    ProductDetailsComponent,\n    ProductUpdateComponent,\n  ]\n})\nexport class ProductModule { }\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { catchError, map, Observable, of } from 'rxjs';\nimport { Product, ProductResolved } from '../model/product';\nimport { ProductService } from './product.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductResolverService implements Resolve<ProductResolved>{\n\n  constructor(private productService: ProductService) { }\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<ProductResolved> | Promise<ProductResolved> {\n    const id = +route.paramMap.get('id')!;\n    if (isNaN(id)) {\n      const message = `Product id was not a number: ${id}`;\n      console.error(message);\n      return of({ product: null, error: message });\n    }\n    return this.productService.getProduct(id)\n      .pipe(\n        map((product: Product) => ({ product, error: '' })),\n        catchError(error => {\n          const message = `Retrieval error: ${error}`;\n          console.error(message);\n          return of({ product: null, error: message });\n        })\n      );\n  }\n}","import { Injectable } from '@angular/core';\nimport { catchError, map, Observable, of, tap, throwError } from 'rxjs';\nimport { Product } from '../model/product';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n  private productsUrl = 'api/products';\n  constructor(private http: HttpClient) { }\n  getProducts(): Observable<Product[]> {\n    return this.http.get<Product[]>(this.productsUrl)\n      .pipe(\n        tap(data => console.log(JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n  getProduct(id: number): Observable<Product> {\n    if (id === 0) {\n      return of(this.initializeProduct());\n    }\n    const url = `${this.productsUrl}/${id}`;\n    return this.http.get<Product>(url)\n      .pipe(\n        tap(data => console.log('getProduct: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n  createProduct(product: Product): Observable<Product> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    // Required for the in memory web API to assign a unique id\n    product.id = null;\n    return this.http.post<Product>(this.productsUrl, product, { headers })\n      .pipe(\n        tap(data => console.log('createProduct: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n  deleteProduct(id: number): Observable<{}> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    const url = `${this.productsUrl}/${id}`;\n    return this.http.delete<Product>(url, { headers })\n      .pipe(\n        tap(data => console.log('deleteProduct: ' + id)),\n        catchError(this.handleError)\n      );\n  }\n  updateProduct(product: Product): Observable<Product> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    const url = `${this.productsUrl}/${product.id}`;\n    return this.http.put<Product>(url, product, { headers })\n      .pipe(\n        tap(() => console.log('updateProduct: ' + product.id)),\n        // Return the product on an update\n        map(() => product),\n        catchError(this.handleError)\n      );\n  }\n  private handleError(err: HttpErrorResponse): Observable<never> {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage: string;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.message}`;\n    }\n    console.error(err);\n    return throwError(() => errorMessage);\n  }\n  private initializeProduct(): Product {\n    // Return an initialized object\n    return {\n      id: 0,\n      productName: '',\n      productCode: '',\n      category: '',\n      tags: [],\n      releaseDate: '',\n      price: 0,\n      description: '',\n      starRating: 0,\n      imageUrl: ''\n    };\n  }\n}"],"names":[],"sourceRoot":"webpack:///"}